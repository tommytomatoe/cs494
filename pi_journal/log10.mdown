## xinu update
### November 10

Today I updated the xinu source.

```
cd xinu
git pull
```

I also did a little deeper dive into the scheduler. Instead of modifying the
source, I decided to learn and review it. I also took some notes the scheduler
in general.

In general, the scheduling policy is like so:
  - Fundamental to the OS
  - Determines when process is set for execution
  - Depends on process priority, time process waits, and the process owner

The scheduler operates in a few key steps
  - Examine processes eligible for execution
  - Select one based on a certain scheduling policy
  - Switch CPU to selected item

Two-level scheduling is also possible
  - Select process
  - select thread within process

The scheduler has a number of queues
  - Ready queue - processes are in main memory, ready to execute
  - Job queue - set of all the processes in the system
  - Device queue - set of processes waiting on I/O

Processes go between the queues


There are two Schedulers involved:

Long-term scheduler - job scheduler
  - determines which processes go into ready queue
  - invoked very infrequently, magnitude of seconds or minutes
  - controls the degree of multiprogramming

Short-term scheduler - CPU scheduler
  - determines which process executes next, allocates in CPU
  - invoked very frequently, magnitude of milliseconds
  - has to be very fast

In Xinu, the processes behave like so:

Each Process is assigned a priority
  - number is unsigned int
  - initialized when created
  - can be changed

Scheduler decides process with highest priority
  - processes with the same priority are scheduled in a round-robin fashion

Policy enforced as a system-wide invariant
  - System calls
  - Interrupts

Essentially, the scheduling works like this

If process state is ready or current, it is eligible
To prevent searching the process table, processes are stored in a link list.
Order is list by priority, and the selection is in constant time - fast

This is the resched() code:

```
/**
 * @ingroup threads
 *
 * Reschedule processor to highest priority ready thread.
 * Upon entry, thrcurrent gives current thread id.
 * Threadtab[thrcurrent].pstate gives correct NEXT state
 * for current thread if other than THRREADY.
 * @return OK when the thread is context switched back
 */
int resched(void)
{
    uchar asid;                 /* address space identifier */
    struct thrent *throld;      /* old thread entry */
    struct thrent *thrnew;      /* new thread entry */

    if (resdefer > 0)
    {                           /* if deferred, increase count & return */
        resdefer++;
        return (OK);
    }

    throld = &thrtab[thrcurrent];

    throld->intmask = disable();

    if (THRCURR == throld->state)
    {
        if (nonempty(readylist) && (throld->prio > firstkey(readylist)))
        {
            restore(throld->intmask);
            return OK;
        }
        throld->state = THRREADY;
        insert(thrcurrent, readylist, throld->prio);
    }

    /* get highest priority thread from ready list */
    thrcurrent = dequeue(readylist);
    thrnew = &thrtab[thrcurrent];
    thrnew->state = THRCURR;

    /* change address space identifier to thread id */
    asid = thrcurrent & 0xff;
    ctxsw(&throld->stkptr, &thrnew->stkptr, asid);

    /* old thread returns here when resumed */
    restore(throld->intmask);
    return OK;
}
```

Here is the signal code:

```
/**
 * @ingroup semaphores
 *
 * Signal a semaphore, releasing up to one waiting thread.
 *
 * signal() may reschedule the currently running thread.  As a result, signal()
 * should not be called from non-reentrant interrupt handlers unless ::resdefer
 * is set to a positive value at the start of the interrupt handler.
 *
 * @param sem
 *      Semaphore to signal.
 *
 * @return
 *      ::OK on success, ::SYSERR on failure.  This function can only fail if @p
 *      sem did not specify a valid semaphore.
 */
syscall signal(semaphore sem)
{
    register struct sement *semptr;
    irqmask im;

    im = disable();
    if (isbadsem(sem))
    {
        restore(im);
        return SYSERR;
    }
    semptr = &semtab[sem];
    if ((semptr->count++) < 0)
    {
        ready(dequeue(semptr->queue), RESCHED_YES);
    }
    restore(im);
    return OK;
}
```



